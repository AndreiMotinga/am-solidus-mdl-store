- paginated_products = @searcher.retrieve_products if params.key?(:keywords)
-   paginated_products ||= products
- content_for :head do
  - if paginated_products.respond_to?(:total_pages)
    = rel_next_prev_link_tags paginated_products

div[data-hook="products_search_results_heading"]
  - if products.empty?
    div[data-hook="products_search_results_heading_no_results_found"]
      = Spree.t(:no_products_found)
  - elsif params.key?(:keywords)
    div[data-hook="products_search_results_heading_results_found"]
      h6.search-results-title
        = Spree.t(:search_results, keywords: h(params[:keywords]))
ul#products.inline.product-listing[data-hook]
  - products.each do |product|
    - url = spree.product_path(product, taxon_id: @taxon.try(:id))
    |  <li id="product_
    = product.id
    | " class="columns three
    = cycle("alpha", "secondary", "", "omega secondary", name: "classes")
    | " data-hook="products_list_item" itemscope itemtype="http://schema.org/Product">
    - cache(@taxon.present? ? [I18n.locale, current_pricing_options, @taxon, product] : [I18n.locale, current_pricing_options, product]) do
      .product-image
        = link_to image_tag(product.display_image.attachment(:small), itemprop: "image"), url, itemprop: 'url'
      = link_to truncate(product.name, length: 50), url, class: 'info', itemprop: "name", title: product.name
      span[itemprop="offers" itemscope itemtype="http://schema.org/Offer"]
        span.price.selling[itemprop="price"]
          = display_price(product)
  - reset_cycle("classes")
- if paginated_products.respond_to?(:total_pages)
  = paginate paginated_products
